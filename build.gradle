buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.liquibase:liquibase-core:4.23.0'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.liquibase.gradle' version '3.0.2'
	id "org.hibernate.tool.hibernate-tools-gradle" version "7.0.3.Final"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain { 
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

configurations {
	reverseMap
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.postgresql:postgresql:42.6.0'//add for gen entities

	liquibaseRuntime 'org.liquibase:liquibase-core:4.23.0'
	liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.1.1'
	liquibaseRuntime 'info.picocli:picocli:4.7.5'
	liquibaseRuntime 'org.yaml:snakeyaml:1.33'
	liquibaseRuntime 'org.postgresql:postgresql'
	liquibaseRuntime sourceSets.main.output
	liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa'
//	liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate5:4.17.0'
	liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate6:4.25.1'

	reverseMap 'org.hibernate:hibernate-core:5.4.21.Final'
	reverseMap 'org.hibernate:hibernate-tools:5.4.21.Final'
	reverseMap 'org.slf4j:slf4j-simple:1.7.36'
	reverseMap 'org.postgresql:postgresql:42.6.0'
}

apply plugin: "org.liquibase.gradle"

def getTimestamp() {
	def date = new Date()
	return date.format('yyyyMMddHHmmss')
}

final MIGR_NAME = "src/main/resources/db/changelog/changelog_" + getTimestamp() + ".yaml"

ext{
	runList = project.hasProperty('runList') ? project.runList : "main"
}

liquibase {
	activities {
		main {

		}
		genChangelogFromDB{
			changelogFile "src/main/resources/db/changelog/db-changelog-from-entity.xml"
		}
		genNewChangelog{
			changelogFile MIGR_NAME
			driver "org.postgresql.Driver"
			referenceUrl "hibernate:spring:com.example.test.data.entities?dialect=org.hibernate.dialect.PostgreSQLDialect" +
					"&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl" +
					"&hibernate.implicit_naming_strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl"
		}
	}
	runList = project.ext.runList
}

//tasks.register("generateChangelogFromDB"){
//	group = "Liquibase"
//	description = "Use to generate initial changelog file from existed db."
//	doFirst {
//		project.ext.runList = "genChangelogFromDB"
//	}
//	dependsOn "generateChangelog"
//}

tasks.register('syncDbFromEntities') {
	group = 'Liquibase'
	description = 'Generate changelog from entities.'

	dependsOn 'compileJava'

	finalizedBy 'diffChangelog'
}

tasks.named('test') {
	useJUnitPlatform()
}

def hibernateDestDir = file("$projectDir/src/main/java/com/example/test/data/generated/")

tasks.register('reverseMap') {
	group = 'hibernate'
	description = 'Generate @Entity classes from existing DB schema'

	outputs.dir(hibernateDestDir)

	doLast {
		if (!hibernateDestDir.exists()) {
			mkdir(hibernateDestDir)
		}
//		println("$projectDir")
		ant.taskdef(
				name: 'hibernatetool',
				classname: 'org.hibernate.tool.ant.HibernateToolTask',
				classpath: configurations.reverseMap.asPath
		)

		ant.hibernatetool(destdir: hibernateDestDir) {
			jdbcconfiguration (
					propertyfile: "src/main/resources/hibernate.properties"
			)
			hbm2java(
					jdk5: true,
					ejb3: true
			)
		}
	}
}
